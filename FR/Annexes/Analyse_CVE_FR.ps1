do {
    # Afficher le message initial
    Write-Host "Quelle CVE voulez-vous rechercher ?"

    # Lire l'entrée saisie par l'utilisateur
    $entry = Read-Host

    # Vérifier si l'entrée est au format valide
    if ($entry -match "^CVE-\d{4}-\d+") {
        # Charger le CSV et chercher la référence CVE
        $csvFilePath = "C:\temp\epss_scores-current.csv"
        $csvData = Import-Csv $csvFilePath -Header "CVE", "ValeurInutile", "Centile"
        $cveEntry = $csvData | Where-Object { $_.CVE -eq $entry }

        if ($cveEntry) {
            # Calculer le centile en pourcentage avec deux chiffres après la virgule
            $centilePercentage = [string]::Format("{0:F2}%", [float]($cveEntry.Centile) * 100)

            # Construire l'URL de l'API cve-search.org pour la CVE saisie
            $cveSearchUrl = "https://cve.circl.lu/api/cve/$entry"

            # Faire une requête HTTP pour obtenir les informations de la CVE depuis cve-search.org
            $cveSearchResponse = Invoke-RestMethod -Uri $cveSearchUrl

            # Extraire les informations spécifiques de cve-search.org
            $datePublication = $cveSearchResponse.Published
            $dateDerniereModification = $cveSearchResponse["last-modified"]
            $description = $cveSearchResponse.summary

            # Rechercher la CVE dans le fichier JSON depuis l'URL de CISA
            $jsonUrl = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
            $jsonContent = Invoke-RestMethod -Uri $jsonUrl

            $cveFound = $jsonContent.vulnerabilities | Where-Object { $_.cveID -eq $entry }

            # Récupérer les informations de vendeur, produit et version depuis l'URL CVEAWG
            $cveAWGUrl = "https://cveawg.mitre.org/api/cve/$entry"
            $cveAWGResponse = Invoke-RestMethod -Uri $cveAWGUrl

            $vendeur = $cveAWGResponse.containers.cna.affected[0].vendor
            $produit = $cveAWGResponse.containers.cna.affected[0].product
            $versionAffectee = $cveAWGResponse.containers.cna.affected[0].versions[0].lessThan

            # Afficher les résultats
            Write-Host "Proba. d'exp: $centilePercentage"
            Write-Host "Référence CVE: $($cveEntry.CVE)"
            Write-Host "Date de publication: $datePublication"
            Write-Host "Date de dernière modification: $dateDerniereModification"
            Write-Host "Description: $description"

            if ($cveFound) {
                # Afficher les informations de CISA
                Write-Host "Exploitation connue: Oui"
                Write-Host "Date de première exploitation connue: $($cveFound.dateAdded)"
                Write-Host "Action recommandée: $($cveFound.requiredAction)"
                Write-Host "Notes: $($cveFound.notes)"
            } else {
                Write-Host "Exploitation connue: Non"
            }

            # Afficher les informations de vendeur, produit et version
            Write-Host "Vendeur : $vendeur"
            Write-Host "Produit : $produit"
            Write-Host "Version affectée : $versionAffectee"
        } else {
            Write-Host "La référence CVE n'a pas été trouvée dans le fichier EPSS."
        }
    } else {
        Write-Host "Format de référence CVE invalide."
    }

$entry = $null

    # Demander si l'utilisateur souhaite réaliser une autre analyse
    $continue = Read-Host "Souhaitez-vous réaliser une autre analyse ? (O/N)"

    while ($continue -notin @("O", "o", "N", "n")) {
        $continue = Read-Host "Réponse invalide. Souhaitez-vous réaliser une autre analyse ? (O/N)"
    }

} while ($continue -eq "O" -or $continue -eq "o")

Write-Host "Fin du script."