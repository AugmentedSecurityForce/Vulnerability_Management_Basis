<#
.SYNOPSIS
Script for quick CVE analysis.

.DESCRIPTION
To use the script: .\Calculate_EPSS_v3.ps1 {CVE}

.NOTES
Author: Julien Garcia - Augmented Security Force
Version: 1.1
Creation Date: 
- July 2023: Initial version
- October 2023: Modified to take CVE as an argument

.LINK
Github : https://github.com/AugmentedSecurityForce/Vulnerability_Management_Basis/tree/main/EN
LinkedIn : https://www.linkedin.com/in/jgarcia-cybersec/

.LICENSE
Creative Commons Zero v1.0 Universal License (https://creativecommons.org/publicdomain/zero/1.0/deed.en)

.REQUIREMENT
7-Zip x64 version, modify accordingly if needed.
#>

param (
    [string]$CVE = $(throw "Please provide a CVE reference as an argument, e.g., 'CVE-2023-48772'")
)

# Check if the provided argument is in a valid format
if ($CVE -match "^CVE-\d{4}-\d+") {
    # Set the destination directory path for the .gz file
    $destinationDirectory = "C:\temp"

    # Name of the .gz file to download
    $gzFileName = "epss_scores-current.csv.gz"

    # Name of the uncompressed file
    $uncompressedFileName = "epss_scores-current.csv"

    # Check if the files already exist and delete them
    $gzFilePath = Join-Path -Path $destinationDirectory -ChildPath $gzFileName
    $csvFilePath = Join-Path -Path $destinationDirectory -ChildPath $uncompressedFileName

    if (Test-Path $gzFilePath) {
        Remove-Item -Path $gzFilePath -Force
    }

    if (Test-Path $csvFilePath) {
        Remove-Item -Path $csvFilePath -Force
    }

    # Build the URL to download the .gz file
    $gzFileUrl = "https://epss.cyentia.com/epss_scores-current.csv.gz"

    # Download the .gz file
    Invoke-WebRequest -Uri $gzFileUrl -OutFile $gzFilePath

    # Use 7-Zip to extract the .gz file
    & "C:\Program Files\7-Zip\7z.exe" x "$gzFilePath" -o"$destinationDirectory"

    # Load the CSV from the decompressed file
    $csvData = Import-Csv $csvFilePath -Header "CVE", "UnusedValue", "Centile"
    $cveEntry = $csvData | Where-Object { $_.CVE -eq $CVE }

    if ($cveEntry) {
        # Calculate the centile percentage with two decimal places
        $centilePercentage = [string]::Format("{0:F2}%", [float]($cveEntry.Centile) * 100)

        # Build the URL for the cve-search.org API for the entered CVE
        $cveSearchUrl = "https://cve.circl.lu/api/cve/$CVE"

        # Make an HTTP request to retrieve CVE information from cve-search.org
        $cveSearchResponse = Invoke-RestMethod -Uri $cveSearchUrl

        # Extract specific information from cve-search.org
        $datePublished = $cveSearchResponse.Published
        $lastModifiedDate = $cveSearchResponse."last-modified"
        $description = $cveSearchResponse.summary

        # Search for the CVE in the JSON file from the CISA URL
        $jsonUrl = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
        $jsonContent = Invoke-RestMethod -Uri $jsonUrl

        $cveFound = $jsonContent.vulnerabilities | Where-Object { $_.cveID -eq $CVE }

        # Retrieve vendor, product, and version information from the CVEAWG URL
        $cveAWGUrl = "https://cveawg.mitre.org/api/cve/$CVE"
        $cveAWGResponse = Invoke-RestMethod -Uri $cveAWGUrl

        $vendor = $cveAWGResponse.containers.cna.affected[0].vendor
        $product = $cveAWGResponse.containers.cna.affected[0].product
        $affectedVersion = $cveAWGResponse.containers.cna.affected[0].versions[0].lessThan

        # Display the results
        Write-Host "Exp. Prob.: $centilePercentage"
        Write-Host "CVE Reference: $($cveEntry.CVE)"
        Write-Host "Publication Date: $datePublished"
        Write-Host "Last Modified Date: $lastModifiedDate"
        Write-Host "Description: $description"

        if ($cveFound) {
            # Display CISA information
            Write-Host "Known Exploitation: $($cveFound.knownRansomwareCampaignUse)"
            if ($cveFound.knownRansomwareCampaignUse -eq "Known") {
                Write-Host "Currently Known to be Exploited in Ransomware Campaigns? : Positive"
            }
            elseif ($cveFound.knownRansomwareCampaignUse -eq "Unknown") {
                Write-Host "Currently Known to be Exploited in Ransomware Campaigns? : Negative"
            }
            Write-Host "Date of First Known Exploitation: $($cveFound.dateAdded)"
            Write-Host "Recommended Action: $($cveFound.requiredAction)"
            Write-Host "Notes: $($cveFound.notes)"
        } else {
            Write-Host "Known Exploitation: No"
            # If the CVE is not found, the field "Currently Known to be Exploited in Ransomware Campaigns?" is undefined.
        }

        # Display vendor, product, and version information
        Write-Host "Vendor: $vendor"
        Write-Host "Product: $product"
        Write-Host "Affected Version: $affectedVersion"
    } else {
        Write-Host "CVE reference not found in the EPSS file."
    }

} else {
    Write-Host "Invalid CVE reference format. The format should be 'CVE-xxxx-yyyy'."
}

Write-Host "End of the script."
