do {
    # Display the initial message
    Write-Host "Which CVE do you want to search for?"

    # Read the input entered by the user
    $entry = Read-Host

    # Check if the input is in the valid format
    if ($entry -match "^CVE-\d{4}-\d+") {
        # Load the CSV and search for the CVE reference
        $csvFilePath = "C:\temp\epss_scores-current.csv"
        $csvData = Import-Csv $csvFilePath -Header "CVE", "UnusedValue", "Centile"
        $cveEntry = $csvData | Where-Object { $_.CVE -eq $entry }

        if ($cveEntry) {
            # Calculate the centile as a percentage with two decimal places
            $centilePercentage = [string]::Format("{0:F2}%", [float]($cveEntry.Centile) * 100)

            # Build the cve-search.org API URL for the entered CVE
            $cveSearchUrl = "https://cve.circl.lu/api/cve/$entry"

            # Make an HTTP request to get CVE information from cve-search.org
            $cveSearchResponse = Invoke-RestMethod -Uri $cveSearchUrl

            # Extract specific information from cve-search.org
            $datePublished = $cveSearchResponse.Published
            $lastModified = $cveSearchResponse["last-modified"]
            $description = $cveSearchResponse.summary

            # Search for the CVE in the JSON file from the CISA URL
            $jsonUrl = "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
            $jsonContent = Invoke-RestMethod -Uri $jsonUrl

            $cveFound = $jsonContent.vulnerabilities | Where-Object { $_.cveID -eq $entry }

            # Retrieve vendor, product, and version information from the CVEAWG URL
            $cveAWGUrl = "https://cveawg.mitre.org/api/cve/$entry"
            $cveAWGResponse = Invoke-RestMethod -Uri $cveAWGUrl

            $vendor = $cveAWGResponse.containers.cna.affected[0].vendor
            $product = $cveAWGResponse.containers.cna.affected[0].product
            $affectedVersion = $cveAWGResponse.containers.cna.affected[0].versions[0].lessThan

            # Display the results
            Write-Host "Exploitation Probability: $centilePercentage"
            Write-Host "CVE Reference: $($cveEntry.CVE)"
            Write-Host "Date Published: $datePublished"
            Write-Host "Last Modified Date: $lastModified"
            Write-Host "Description: $description"

            if ($cveFound) {
                # Display CISA information
                Write-Host "Known Exploitation: Yes"
                Write-Host "Date of First Known Exploitation: $($cveFound.dateAdded)"
                Write-Host "Recommended Action: $($cveFound.requiredAction)"
                Write-Host "Notes: $($cveFound.notes)"
            } else {
                Write-Host "Known Exploitation: No"
            }

            # Display vendor, product, and version information
            Write-Host "Vendor: $vendor"
            Write-Host "Product: $product"
            Write-Host "Affected Version: $affectedVersion"
        } else {
            Write-Host "The CVE reference was not found in the EPSS file."
        }
    } else {
        Write-Host "Invalid CVE reference format."
    }

    $entry = $null

    # Ask if the user wants to perform another analysis
    $continue = Read-Host "Would you like to perform another analysis? (Y/N)"

    while ($continue -notin @("Y", "y", "N", "n")) {
        $continue = Read-Host "Invalid response. Would you like to perform another analysis? (Y/N)"
    }

} while ($continue -eq "Y" -or $continue -eq "y")

Write-Host "End of the script."
